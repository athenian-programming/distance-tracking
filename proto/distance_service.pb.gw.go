// Code generated by protoc-gen-grpc-gateway
// source: proto/distance_service.proto
// DO NOT EDIT!

/*
Package distance_server is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package distance_server

import (
    "io"
    "net/http"

    "github.com/golang/protobuf/proto"
    "github.com/golang/protobuf/ptypes/empty"
    "github.com/grpc-ecosystem/grpc-gateway/runtime"
    "github.com/grpc-ecosystem/grpc-gateway/utilities"
    "golang.org/x/net/context"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/grpclog"
)

var _ codes.Code
var _ io.Reader
var _ = runtime.String
var _ = utilities.NewDoubleArray

var (
    filter_DistanceService_GetDistances_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_DistanceService_GetDistances_0(ctx context.Context, marshaler runtime.Marshaler, client DistanceServiceClient, req *http.Request, pathParams map[string]string) (DistanceService_GetDistancesClient, runtime.ServerMetadata, error) {
    var protoReq ClientInfo
    var metadata runtime.ServerMetadata

    if err := runtime.PopulateQueryParameters(&protoReq, req.URL.Query(), filter_DistanceService_GetDistances_0); err != nil {
        return nil, metadata, grpc.Errorf(codes.InvalidArgument, "%v", err)
    }

    stream, err := client.GetDistances(ctx, &protoReq)
    if err != nil {
        return nil, metadata, err
    }
    header, err := stream.Header()
    if err != nil {
        return nil, metadata, err
    }
    metadata.HeaderMD = header
    return stream, metadata, nil

}

func request_DistanceService_GetDistance_0(ctx context.Context, marshaler runtime.Marshaler, client DistanceServiceClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
    var protoReq empty.Empty
    var metadata runtime.ServerMetadata

    msg, err := client.GetDistance(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
    return msg, metadata, err

}

// RegisterDistanceServiceHandlerFromEndpoint is same as RegisterDistanceServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterDistanceServiceHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
    conn, err := grpc.Dial(endpoint, opts...)
    if err != nil {
        return err
    }
    defer func() {
        if err != nil {
            if cerr := conn.Close(); cerr != nil {
                grpclog.Printf("Failed to close conn to %s: %v", endpoint, cerr)
            }
            return
        }
        go func() {
            <-ctx.Done()
            if cerr := conn.Close(); cerr != nil {
                grpclog.Printf("Failed to close conn to %s: %v", endpoint, cerr)
            }
        }()
    }()

    return RegisterDistanceServiceHandler(ctx, mux, conn)
}

// RegisterDistanceServiceHandler registers the http handlers for service DistanceService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterDistanceServiceHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
    client := NewDistanceServiceClient(conn)

    mux.Handle("GET", pattern_DistanceService_GetDistances_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
        ctx, cancel := context.WithCancel(ctx)
        defer cancel()
        if cn, ok := w.(http.CloseNotifier); ok {
            go func(done <-chan struct{}, closed <-chan bool) {
                select {
                case <-done:
                case <-closed:
                    cancel()
                }
            }(ctx.Done(), cn.CloseNotify())
        }
        inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
        rctx, err := runtime.AnnotateContext(ctx, req)
        if err != nil {
            runtime.HTTPError(ctx, outboundMarshaler, w, req, err)
        }
        resp, md, err := request_DistanceService_GetDistances_0(rctx, inboundMarshaler, client, req, pathParams)
        ctx = runtime.NewServerMetadataContext(ctx, md)
        if err != nil {
            runtime.HTTPError(ctx, outboundMarshaler, w, req, err)
            return
        }

        forward_DistanceService_GetDistances_0(ctx, outboundMarshaler, w, req, func() (proto.Message, error) {
            return resp.Recv()
        }, mux.GetForwardResponseOptions()...)

    })

    mux.Handle("GET", pattern_DistanceService_GetDistance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
        ctx, cancel := context.WithCancel(ctx)
        defer cancel()
        if cn, ok := w.(http.CloseNotifier); ok {
            go func(done <-chan struct{}, closed <-chan bool) {
                select {
                case <-done:
                case <-closed:
                    cancel()
                }
            }(ctx.Done(), cn.CloseNotify())
        }
        inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
        rctx, err := runtime.AnnotateContext(ctx, req)
        if err != nil {
            runtime.HTTPError(ctx, outboundMarshaler, w, req, err)
        }
        resp, md, err := request_DistanceService_GetDistance_0(rctx, inboundMarshaler, client, req, pathParams)
        ctx = runtime.NewServerMetadataContext(ctx, md)
        if err != nil {
            runtime.HTTPError(ctx, outboundMarshaler, w, req, err)
            return
        }

        forward_DistanceService_GetDistance_0(ctx, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

    })

    return nil
}

var (
    pattern_DistanceService_GetDistances_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"v1", "distances"}, ""))

    pattern_DistanceService_GetDistance_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"v1", "distance"}, ""))
)

var (
    forward_DistanceService_GetDistances_0 = runtime.ForwardResponseStream

    forward_DistanceService_GetDistance_0 = runtime.ForwardResponseMessage
)
